#include <iostream>
#include <iomanip>
using namespace std;

#include <stdint.h>

typedef uint32_t crc_t;


static crc_t Table[0x10000];

crc_t crc16(crc_t poly, uint8_t* data, int bytes)
{
    crc_t r = 0;

    {
        crc_t b = (crc_t)data[1] | ((crc_t)data[0] << 8);

        r = b;
    }

    for (int i = 2; i < bytes; i += 2)
    {
        crc_t b = (crc_t)data[i + 1] | ((crc_t)data[i] << 8);

        r = b ^ Table[r];
    }

    return Table[r];
}

void crc16_init(crc_t poly)
{
    for (crc_t r = 0; r < 0x10000; ++r)
    {
        crc_t t = r;

        for (int i = 0; i < 16; ++i)
        {
            t <<= 1;
            if (t >= 0x10000)
            {
                t ^= poly;
            }
        }

        Table[r] = t;
    }
}

static const int datalen = 30;

uint8_t data[datalen + 32] = {};

bool* seen = new bool[0x10000];

bool checkn(crc_t poly, int n)
{
    memset(seen, 0, sizeof(bool) * 0x10000);

    for (int i = 0; i < datalen * 8 - n + 1; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            int k = i + j;
            data[k / 8] ^= 1 << (k % 8);
        }

        crc_t r = crc16(poly, data, datalen);

        for (int j = 0; j < n; ++j)
        {
            int k = i + j;
            data[k / 8] = 0;
        }

        if (seen[r])
        {
            return false;
        }
        seen[r] = true;
    }

    return true;
}

bool checkvarn(crc_t poly)
{
    for (int n = 1; n <= 240; ++n)
    {
        if (!checkn(poly, n))
        {
            return false;
        }
    }

    return true;
}

static void FindGeneratorPolynomials()
{
    cout << "static const u8 GEN_POLY[] = {" << endl;
    int seen = 0;
    for (uint32_t taps = 0; taps < 0x10000; ++taps)
    {
        uint32_t lfsr = 1;

        int count = 0;
        for (int ii = 0; ii < 0x10000 - 1; ++ii)
        {
            uint32_t lsb = lfsr & 1;
            lfsr >>= 1;
            if (lsb) lfsr ^= taps;
            if (lfsr == 1) ++count;
        }

        if (lfsr == 1 && count == 1)
        {
            cout << "0x" << hex << (int)taps << dec << ", ";
            if ((++seen & 7) == 0) cout << endl;
        }
    }
    cout << "};" << endl;

    cout << " count = " << seen << endl;
}

static const uint16_t GEN_POLY[2048] = {
    0x8016, 0x801c, 0x801f, 0x8029, 0x805e, 0x806b, 0x8097, 0x809e,
    0x80a7, 0x80ae, 0x80cb, 0x80d0, 0x80d6, 0x80df, 0x80e3, 0x810a,
    0x810c, 0x8112, 0x8117, 0x812e, 0x8136, 0x8142, 0x8148, 0x8150,
    0x8172, 0x818e, 0x81a5, 0x81b4, 0x81b8, 0x81c3, 0x81c6, 0x81cf,
    0x81d1, 0x81ee, 0x81fc, 0x8214, 0x822b, 0x8233, 0x8241, 0x8244,
    0x8248, 0x825f, 0x8260, 0x8299, 0x82a3, 0x82b4, 0x82c3, 0x82e1,
    0x82ee, 0x82f5, 0x8320, 0x8325, 0x8329, 0x8345, 0x8361, 0x83b5,
    0x83b6, 0x83bc, 0x83c1, 0x83f8, 0x8406, 0x8430, 0x845f, 0x846a,
    0x846f, 0x8471, 0x8478, 0x847d, 0x849c, 0x84be, 0x84c5, 0x84d2,
    0x84d7, 0x84e1, 0x84e2, 0x84f3, 0x84f9, 0x853e, 0x8540, 0x855d,
    0x8562, 0x8580, 0x8589, 0x858a, 0x85a8, 0x85ae, 0x85e6, 0x85e9,
    0x85f2, 0x8607, 0x860e, 0x8610, 0x8634, 0x8638, 0x863d, 0x8646,
    0x864a, 0x8651, 0x8657, 0x8679, 0x86a1, 0x86c1, 0x86c7, 0x86e9,
    0x86f2, 0x8722, 0x8742, 0x874e, 0x8753, 0x8782, 0x8784, 0x878d,
    0x87b4, 0x87bb, 0x87c3, 0x87ca, 0x87d8, 0x87e7, 0x87ed, 0x8805,
    0x8821, 0x8827, 0x882e, 0x883f, 0x8841, 0x8842, 0x884b, 0x888e,
    0x88b7, 0x88e4, 0x88ed, 0x88f9, 0x8920, 0x8929, 0x8931, 0x893b,
    0x8940, 0x8945, 0x8957, 0x8962, 0x896d, 0x8976, 0x8979, 0x899d,
    0x899e, 0x89ba, 0x89bc, 0x89ce, 0x8a04, 0x8a0d, 0x8a26, 0x8a43,
    0x8a49, 0x8a57, 0x8a64, 0x8a68, 0x8a76, 0x8a7c, 0x8a83, 0x8ac7,
    0x8ad0, 0x8ad5, 0x8aea, 0x8afd, 0x8b0f, 0x8b1b, 0x8b1e, 0x8b21,
    0x8b28, 0x8b4d, 0x8b55, 0x8b6c, 0x8b7e, 0x8b9f, 0x8ba3, 0x8ba9,
    0x8bcc, 0x8bd1, 0x8bd4, 0x8beb, 0x8c37, 0x8c46, 0x8c49, 0x8c54,
    0x8c5d, 0x8c7c, 0x8c7f, 0x8c91, 0x8c92, 0x8cb5, 0x8cba, 0x8cbc,
    0x8cd9, 0x8cf2, 0x8cfe, 0x8d03, 0x8d2b, 0x8d35, 0x8d44, 0x8d71,
    0x8d72, 0x8d84, 0x8d95, 0x8da3, 0x8da5, 0x8dd7, 0x8ddd, 0x8dde,
    0x8de1, 0x8deb, 0x8df0, 0x8e14, 0x8e30, 0x8e42, 0x8e4e, 0x8e5a,
    0x8e65, 0x8e66, 0x8e74, 0x8e77, 0x8e78, 0x8e8b, 0x8e9f, 0x8ea9,
    0x8eac, 0x8eaf, 0x8eb2, 0x8ebb, 0x8ec0, 0x8ec3, 0x8eff, 0x8f10,
    0x8f1f, 0x8f2f, 0x8f38, 0x8f3d, 0x8f4c, 0x8f4f, 0x8f61, 0x8f67,
    0x8f73, 0x8f79, 0x8f94, 0x8f9d, 0x8fab, 0x8fba, 0x8fc1, 0x8fcd,
    0x8fdc, 0x8fdf, 0x8fe0, 0x901e, 0x9028, 0x9047, 0x904d, 0x905c,
    0x9063, 0x9082, 0x90c3, 0x90ca, 0x90d4, 0x90d8, 0x90f0, 0x9113,
    0x911a, 0x9120, 0x9129, 0x9145, 0x9149, 0x9157, 0x9158, 0x9194,
    0x91a2, 0x91ab, 0x91b6, 0x91f1, 0x9207, 0x9216, 0x921c, 0x9225,
    0x924c, 0x924f, 0x9273, 0x927f, 0x928a, 0x92ab, 0x92ae, 0x92b9,
    0x92bc, 0x92cd, 0x92f2, 0x9303, 0x930a, 0x9311, 0x931e, 0x9328,
    0x933f, 0x9341, 0x937d, 0x9388, 0x939c, 0x93ac, 0x93b1, 0x93c3,
    0x93d2, 0x93e2, 0x93f6, 0x940e, 0x9420, 0x9438, 0x943d, 0x9454,
    0x9462, 0x947a, 0x9485, 0x948c, 0x94a1, 0x94a2, 0x94c1, 0x94c4,
    0x94ce, 0x94dc, 0x94e3, 0x94ea, 0x94f8, 0x9512, 0x9514, 0x9518,
    0x951d, 0x953f, 0x9542, 0x9553, 0x9566, 0x956c, 0x9584, 0x9593,
    0x95a9, 0x95bd, 0x95be, 0x95cc, 0x95e8, 0x95ed, 0x960f, 0x961d,
    0x9627, 0x962e, 0x9630, 0x9635, 0x9639, 0x963c, 0x965c, 0x9671,
    0x967b, 0x967d, 0x969a, 0x96a0, 0x96b2, 0x96c0, 0x96ed, 0x96f0,
    0x9707, 0x9723, 0x9725, 0x9726, 0x9738, 0x9762, 0x977c, 0x977f,
    0x979e, 0x97a1, 0x97ad, 0x97b3, 0x97d3, 0x97e9, 0x980b, 0x9813,
    0x983b, 0x9840, 0x9857, 0x9861, 0x986e, 0x9876, 0x987a, 0x9883,
    0x9886, 0x9894, 0x98b9, 0x98d3, 0x98d5, 0x98e6, 0x98ec, 0x9917,
    0x991b, 0x991e, 0x9924, 0x992b, 0x992d, 0x993a, 0x994e, 0x995a,
    0x996c, 0x9977, 0x9978, 0x9982, 0x998d, 0x999c, 0x99cf, 0x99d4,
    0x99e2, 0x99e8, 0x99f9, 0x9a0a, 0x9a12, 0x9a4d, 0x9a7e, 0x9a82,
    0x9a8e, 0x9aa5, 0x9ab8, 0x9abe, 0x9ad1, 0x9ae4, 0x9aeb, 0x9b0d,
    0x9b1a, 0x9b37, 0x9b4c, 0x9b54, 0x9b61, 0x9b68, 0x9b76, 0x9b83,
    0x9b85, 0x9b8c, 0x9ba1, 0x9be6, 0x9bf1, 0x9c00, 0x9c06, 0x9c0f,
    0x9c1b, 0x9c24, 0x9c2e, 0x9c36, 0x9c63, 0x9c65, 0x9c6f, 0x9c7d,
    0x9c90, 0x9c9f, 0x9ca6, 0x9ca9, 0x9caf, 0x9cb2, 0x9ccc, 0x9cdb,
    0x9cde, 0x9ce4, 0x9cff, 0x9d04, 0x9d0d, 0x9d2a, 0x9d32, 0x9d34,
    0x9d3b, 0x9d5e, 0x9d67, 0x9d79, 0x9d94, 0x9da2, 0x9dad, 0x9dce,
    0x9de5, 0x9de9, 0x9df7, 0x9df8, 0x9e23, 0x9e25, 0x9e34, 0x9e37,
    0x9e49, 0x9e83, 0x9e89, 0x9e91, 0x9e98, 0x9e9e, 0x9ea1, 0x9ea4,
    0x9eb3, 0x9eb5, 0x9ec1, 0x9ec8, 0x9ed9, 0x9ee0, 0x9ee6, 0x9f18,
    0x9f21, 0x9f22, 0x9f28, 0x9f2b, 0x9f47, 0x9f69, 0x9f6f, 0x9f74,
    0x9f7d, 0x9f8e, 0x9fc0, 0x9fd2, 0x9fe2, 0xa03a, 0xa04e, 0xa066,
    0xa084, 0xa09f, 0xa0a5, 0xa0a9, 0xa0ac, 0xa0c9, 0xa0cc, 0xa0d7,
    0xa0dd, 0xa0de, 0xa0f0, 0xa0f3, 0xa0f9, 0xa0ff, 0xa101, 0xa108,
    0xa125, 0xa138, 0xa140, 0xa154, 0xa167, 0xa170, 0xa176, 0xa185,
    0xa1a1, 0xa1bf, 0xa1c1, 0xa1df, 0xa1f7, 0xa1fd, 0xa207, 0xa223,
    0xa23b, 0xa24a, 0xa24f, 0xa251, 0xa25d, 0xa262, 0xa270, 0xa27c,
    0xa285, 0xa294, 0xa29b, 0xa2b9, 0xa2c4, 0xa2c7, 0xa2cd, 0xa2ce,
    0xa2da, 0xa2dc, 0xa2fb, 0xa2fe, 0xa314, 0xa322, 0xa32e, 0xa339,
    0xa348, 0xa350, 0xa365, 0xa36a, 0xa36f, 0xa374, 0xa37e, 0xa390,
    0xa3be, 0xa3c9, 0xa3cc, 0xa3e1, 0xa3e4, 0xa3fc, 0xa40e, 0xa41a,
    0xa41f, 0xa42c, 0xa440, 0xa454, 0xa461, 0xa46d, 0xa47f, 0xa485,
    0xa48a, 0xa497, 0xa498, 0xa4ef, 0xa4f2, 0xa4fd, 0xa509, 0xa50a,
    0xa517, 0xa536, 0xa53a, 0xa556, 0xa55a, 0xa565, 0xa56f, 0xa57b,
    0xa57d, 0xa590, 0xa5a6, 0xa5b1, 0xa5be, 0xa5db, 0xa5e4, 0xa5e7,
    0xa5ee, 0xa5f9, 0xa5fc, 0xa5ff, 0xa60f, 0xa633, 0xa639, 0xa653,
    0xa65c, 0xa663, 0xa67b, 0xa67e, 0xa687, 0xa69c, 0xa6a6, 0xa6af,
    0xa6b4, 0xa6b8, 0xa6c5, 0xa6c6, 0xa6f3, 0xa6f5, 0xa6f9, 0xa725,
    0xa737, 0xa740, 0xa743, 0xa751, 0xa757, 0xa758, 0xa775, 0xa77a,
    0xa792, 0xa798, 0xa7a4, 0xa7ab, 0xa7ad, 0xa7b0, 0xa7b6, 0xa7c7,
    0xa7d0, 0xa7f1, 0xa801, 0xa807, 0xa82c, 0xa840, 0xa852, 0xa85b,
    0xa85d, 0xa864, 0xa86b, 0xa875, 0xa883, 0xa892, 0xa8a4, 0xa8ae,
    0xa8b6, 0xa8d0, 0xa8d3, 0xa8e9, 0xa8ef, 0xa905, 0xa922, 0xa92e,
    0xa930, 0xa94b, 0xa984, 0xa993, 0xa9b1, 0xa9bb, 0xa9f0, 0xaa2b,
    0xaa2d, 0xaa3f, 0xaa41, 0xaa5a, 0xaa5c, 0xaa6f, 0xaa93, 0xaa96,
    0xaaa5, 0xaac9, 0xaad7, 0xaafa, 0xab10, 0xab15, 0xab16, 0xab23,
    0xab4f, 0xab62, 0xab7a, 0xab94, 0xaba8, 0xabd5, 0xac03, 0xac12,
    0xac1e, 0xac44, 0xac59, 0xac69, 0xac6c, 0xac6f, 0xac95, 0xaca5,
    0xaca6, 0xacb4, 0xacc6, 0xacc9, 0xaccf, 0xacd1, 0xace7, 0xaceb,
    0xacff, 0xad2a, 0xad38, 0xad3e, 0xad4c, 0xad52, 0xad5b, 0xad6b,
    0xada2, 0xada7, 0xadab, 0xadd5, 0xade3, 0xadef, 0xae02, 0xae4c,
    0xae51, 0xae52, 0xae75, 0xae83, 0xae98, 0xae9b, 0xae9d, 0xaebf,
    0xaec8, 0xaed5, 0xaee3, 0xaef8, 0xaefe, 0xaf05, 0xaf0c, 0xaf14,
    0xaf1b, 0xaf2b, 0xaf33, 0xaf55, 0xaf6a, 0xaf72, 0xafaa, 0xafc6,
    0xafde, 0xb010, 0xb01c, 0xb031, 0xb03b, 0xb04f, 0xb06e, 0xb085,
    0xb08c, 0xb09e, 0xb0a1, 0xb0b3, 0xb0bf, 0xb0d6, 0xb0e9, 0xb109,
    0xb118, 0xb11d, 0xb130, 0xb135, 0xb139, 0xb147, 0xb14b, 0xb196,
    0xb199, 0xb19a, 0xb1a9, 0xb1b2, 0xb1bd, 0xb1c0, 0xb1f6, 0xb1fa,
    0xb203, 0xb20f, 0xb21d, 0xb221, 0xb228, 0xb24b, 0xb24d, 0xb274,
    0xb27b, 0xb287, 0xb295, 0xb29a, 0xb29c, 0xb29f, 0xb2b2, 0xb2c9,
    0xb2d2, 0xb2f3, 0xb2f9, 0xb302, 0xb338, 0xb354, 0xb35d, 0xb36b,
    0xb383, 0xb38c, 0xb3b5, 0xb3bc, 0xb3d0, 0xb3df, 0xb3ec, 0xb3ef,
    0xb3fb, 0xb400, 0xb405, 0xb40f, 0xb424, 0xb44e, 0xb465, 0xb469,
    0xb46a, 0xb48b, 0xb4a3, 0xb4aa, 0xb4c6, 0xb4d7, 0xb4e7, 0xb4eb,
    0xb53b, 0xb552, 0xb573, 0xb580, 0xb586, 0xb591, 0xb5ab, 0xb5b5,
    0xb5c7, 0xb5ce, 0xb5d5, 0xb5e3, 0xb5fd, 0xb601, 0xb60e, 0xb61c,
    0xb637, 0xb640, 0xb649, 0xb652, 0xb673, 0xb68a, 0xb69d, 0xb6a1,
    0xb6c4, 0xb6ce, 0xb6d9, 0xb6df, 0xb6e0, 0xb6f2, 0xb70c, 0xb728,
    0xb72e, 0xb733, 0xb73f, 0xb742, 0xb748, 0xb74b, 0xb74d, 0xb76c,
    0xb77e, 0xb7a3, 0xb7c6, 0xb7e4, 0xb7ed, 0xb7ff, 0xb812, 0xb814,
    0xb82b, 0xb82d, 0xb830, 0xb835, 0xb836, 0xb84e, 0xb859, 0xb87e,
    0xb888, 0xb8ac, 0xb8af, 0xb8b7, 0xb8c0, 0xb8e1, 0xb8ee, 0xb8fc,
    0xb902, 0xb90e, 0xb916, 0xb92f, 0xb931, 0xb938, 0xb94c, 0xb951,
    0xb957, 0xb967, 0xb96e, 0xb970, 0xb994, 0xb9a2, 0xb9b6, 0xb9c8,
    0xb9cd, 0xb9d6, 0xb9dc, 0xba08, 0xba1c, 0xba34, 0xba3e, 0xba40,
    0xba43, 0xba4a, 0xba5b, 0xba62, 0xba6b, 0xba76, 0xba80, 0xba8a,
    0xba91, 0xbaa4, 0xbac1, 0xbacd, 0xbad0, 0xbad3, 0xbb06, 0xbb0c,
    0xbb1d, 0xbb1e, 0xbb21, 0xbb2b, 0xbb4e, 0xbb63, 0xbb6f, 0xbb8d,
    0xbb8e, 0xbba0, 0xbba5, 0xbbc0, 0xbbd2, 0xbbdb, 0xbc04, 0xbc1a,
    0xbc1f, 0xbc4c, 0xbc64, 0xbc68, 0xbc6d, 0xbc6e, 0xbc75, 0xbc80,
    0xbc86, 0xbcbc, 0xbcbf, 0xbcc8, 0xbccb, 0xbcf4, 0xbcf7, 0xbd00,
    0xbd0f, 0xbd53, 0xbd55, 0xbd5c, 0xbd7b, 0xbd82, 0xbd9c, 0xbdb1,
    0xbdd8, 0xbddd, 0xbdfa, 0xbe1b, 0xbe27, 0xbe2e, 0xbe50, 0xbe5a,
    0xbe5f, 0xbe65, 0xbe69, 0xbe90, 0xbea3, 0xbeac, 0xbec3, 0xbed2,
    0xbed4, 0xbee2, 0xbeeb, 0xbf0e, 0xbf15, 0xbf25, 0xbf2c, 0xbf32,
    0xbf45, 0xbf49, 0xbf57, 0xbf5d, 0xbf62, 0xbf68, 0xbf76, 0xbf85,
    0xbf97, 0xbf98, 0xbfa2, 0xbfba, 0xbfd9, 0xbfe3, 0xbfe9, 0xc009,
    0xc00a, 0xc036, 0xc042, 0xc07b, 0xc08b, 0xc095, 0xc0db, 0xc108,
    0xc10d, 0xc120, 0xc12a, 0xc145, 0xc149, 0xc14f, 0xc15d, 0xc164,
    0xc179, 0xc17f, 0xc183, 0xc194, 0xc1ab, 0xc1ae, 0xc1b0, 0xc1bc,
    0xc1c2, 0xc1df, 0xc1e0, 0xc1ef, 0xc1f8, 0xc208, 0xc20d, 0xc219,
    0xc226, 0xc237, 0xc257, 0xc267, 0xc268, 0xc26e, 0xc27c, 0xc286,
    0xc289, 0xc294, 0xc29b, 0xc2b0, 0xc2b6, 0xc2bc, 0xc2bf, 0xc2c2,
    0xc2e3, 0xc2ec, 0xc2f4, 0xc2fd, 0xc305, 0xc30c, 0xc312, 0xc31b,
    0xc355, 0xc360, 0xc36c, 0xc378, 0xc37b, 0xc387, 0xc38e, 0xc390,
    0xc399, 0xc3a0, 0xc3a9, 0xc3d7, 0xc3d8, 0xc3e2, 0xc419, 0xc42f,
    0xc431, 0xc464, 0xc497, 0xc498, 0xc4ae, 0xc4bc, 0xc4bf, 0xc4cd,
    0xc4d3, 0xc4d6, 0xc4f7, 0xc4fd, 0xc522, 0xc530, 0xc533, 0xc539,
    0xc53a, 0xc54e, 0xc572, 0xc59a, 0xc5ac, 0xc5b1, 0xc5c0, 0xc5db,
    0xc5e8, 0xc5ed, 0xc606, 0xc611, 0xc648, 0xc64b, 0xc64e, 0xc665,
    0xc677, 0xc693, 0xc6ca, 0xc6d1, 0xc6d2, 0xc6de, 0xc6e4, 0xc6f3,
    0xc710, 0xc723, 0xc734, 0xc758, 0xc7ab, 0xc7c4, 0xc7e9, 0xc7ec,
    0xc7f2, 0xc7f7, 0xc801, 0xc807, 0xc80d, 0xc813, 0xc823, 0xc846,
    0xc852, 0xc873, 0xc88f, 0xc8a1, 0xc8b5, 0xc8bc, 0xc8cd, 0xc8d0,
    0xc918, 0xc928, 0xc936, 0xc93c, 0xc941, 0xc944, 0xc953, 0xc97e,
    0xc982, 0xc98b, 0xc993, 0xc99a, 0xc9a6, 0xc9aa, 0xc9cf, 0xc9e2,
    0xc9ed, 0xc9f5, 0xc9f9, 0xca00, 0xca1d, 0xca39, 0xca44, 0xca48,
    0xca53, 0xca60, 0xca82, 0xca8d, 0xca95, 0xca9c, 0xcaa3, 0xcab8,
    0xcac5, 0xcac6, 0xcad4, 0xcae1, 0xcae8, 0xcb16, 0xcb1a, 0xcb2f,
    0xcb3b, 0xcb3e, 0xcb5b, 0xcb6d, 0xcb7c, 0xcb86, 0xcb8a, 0xcb8f,
    0xcbb0, 0xcbd0, 0xcbd5, 0xcbdc, 0xcbf1, 0xcbf4, 0xcbfe, 0xcc05,
    0xcc11, 0xcc17, 0xcc21, 0xcc87, 0xcc95, 0xcca0, 0xcca3, 0xccc5,
    0xccc6, 0xcce1, 0xccff, 0xcd07, 0xcd0e, 0xcd1a, 0xcd37, 0xcd6b,
    0xcd98, 0xcd9b, 0xcdad, 0xcdb6, 0xcdbc, 0xcdbf, 0xcde5, 0xcdef,
    0xcdf7, 0xcdfe, 0xce29, 0xce32, 0xce34, 0xce46, 0xce51, 0xce62,
    0xce8c, 0xcea2, 0xcea4, 0xcec7, 0xcefb, 0xcf03, 0xcf27, 0xcf2b,
    0xcf30, 0xcf41, 0xcf48, 0xcf53, 0xcf5c, 0xcf63, 0xcf6f, 0xcf78,
    0xcf82, 0xcf88, 0xcf90, 0xcfa6, 0xcfb2, 0xcfbd, 0xcfc9, 0xcfcc,
    0xcfd2, 0xcfdb, 0xd008, 0xd016, 0xd019, 0xd037, 0xd03d, 0xd04a,
    0xd061, 0xd067, 0xd07a, 0xd083, 0xd086, 0xd092, 0xd094, 0xd09b,
    0xd0a2, 0xd0c2, 0xd0ec, 0xd0fe, 0xd11d, 0xd141, 0xd144, 0xd148,
    0xd15f, 0xd160, 0xd17e, 0xd18d, 0xd190, 0xd195, 0xd199, 0xd1a9,
    0xd1b2, 0xd1e7, 0xd224, 0xd227, 0xd233, 0xd23c, 0xd242, 0xd25f,
    0xd260, 0xd265, 0xd272, 0xd274, 0xd27e, 0xd282, 0xd28b, 0xd293,
    0xd295, 0xd29a, 0xd2aa, 0xd2ac, 0xd2c0, 0xd2d8, 0xd2db, 0xd2dd,
    0xd2ee, 0xd316, 0xd31c, 0xd325, 0xd331, 0xd338, 0xd33e, 0xd352,
    0xd35b, 0xd362, 0xd38f, 0xd3b3, 0xd3cb, 0xd3d9, 0xd3dc, 0xd3df,
    0xd41d, 0xd46a, 0xd46f, 0xd47e, 0xd481, 0xd499, 0xd49a, 0xd4a5,
    0xd4a6, 0xd4a9, 0xd4c5, 0xd4d7, 0xd4d8, 0xd4f3, 0xd53b, 0xd54f,
    0xd55e, 0xd561, 0xd568, 0xd57a, 0xd58c, 0xd58f, 0xd5a8, 0xd5ab,
    0xd5ba, 0xd5d3, 0xd5d6, 0xd5da, 0xd5e9, 0xd5ea, 0xd60e, 0xd613,
    0xd62f, 0xd634, 0xd646, 0xd658, 0xd667, 0xd689, 0xd698, 0xd6a7,
    0xd6ad, 0xd6bc, 0xd6d6, 0xd6e0, 0xd6e6, 0xd6fd, 0xd70a, 0xd71e,
    0xd73a, 0xd74b, 0xd74d, 0xd76f, 0xd772, 0xd7a0, 0xd7b2, 0xd7c9,
    0xd7d7, 0xd7ff, 0xd809, 0xd81d, 0xd821, 0xd828, 0xd82d, 0xd83f,
    0xd841, 0xd84d, 0xd85c, 0xd863, 0xd86c, 0xd877, 0xd8a9, 0xd8bb,
    0xd8c5, 0xd8cc, 0xd8dd, 0xd8ee, 0xd8f0, 0xd8f3, 0xd904, 0xd90d,
    0xd926, 0xd92c, 0xd943, 0xd968, 0xd96d, 0xd975, 0xd976, 0xd989,
    0xd991, 0xd9a2, 0xd9a4, 0xd9a7, 0xd9ae, 0xd9bf, 0xd9c7, 0xd9ce,
    0xd9f8, 0xda07, 0xda0d, 0xda0e, 0xda2a, 0xda37, 0xda4c, 0xda9d,
    0xdab5, 0xdad9, 0xdadc, 0xdadf, 0xdae3, 0xdaf2, 0xdaf4, 0xdb12,
    0xdb1e, 0xdb27, 0xdb48, 0xdb4d, 0xdb69, 0xdb77, 0xdb88, 0xdbb4,
    0xdbb7, 0xdbc9, 0xdbd1, 0xdbd4, 0xdbeb, 0xdbf0, 0xdbf6, 0xdc0d,
    0xdc15, 0xdc26, 0xdc29, 0xdc34, 0xdc45, 0xdc46, 0xdc54, 0xdc6e,
    0xdc73, 0xdc97, 0xdcad, 0xdcb6, 0xdcba, 0xdcc8, 0xdcf8, 0xdcfb,
    0xdd0a, 0xdd18, 0xdd22, 0xdd2b, 0xdd41, 0xdd4b, 0xdd50, 0xdd66,
    0xdd7e, 0xdd82, 0xdd8d, 0xdd93, 0xdd9f, 0xdda5, 0xddb7, 0xddd8,
    0xddde, 0xdde7, 0xde03, 0xde05, 0xde14, 0xde30, 0xde33, 0xde78,
    0xde7b, 0xdec6, 0xded4, 0xded7, 0xdef9, 0xdf0b, 0xdf10, 0xdf1c,
    0xdf2f, 0xdf34, 0xdf52, 0xdf64, 0xdf7c, 0xdf91, 0xdf92, 0xdf97,
    0xdf9b, 0xdfa1, 0xdfa8, 0xdfb5, 0xdfc2, 0xdfd3, 0xdfd6, 0xdfef,
    0xe01a, 0xe026, 0xe03d, 0xe058, 0xe064, 0xe067, 0xe079, 0xe085,
    0xe08a, 0xe08c, 0xe09b, 0xe0a8, 0xe0ba, 0xe0bc, 0xe0c1, 0xe0e6,
    0xe0ec, 0xe128, 0xe12e, 0xe133, 0xe14d, 0xe16f, 0xe172, 0xe184,
    0xe1a0, 0xe1b8, 0xe1be, 0xe1c0, 0xe1cf, 0xe1db, 0xe1e4, 0xe1f0,
    0xe209, 0xe222, 0xe23c, 0xe26a, 0xe271, 0xe274, 0xe296, 0xe299,
    0xe2a0, 0xe2a9, 0xe2bb, 0xe2be, 0xe2d8, 0xe2db, 0xe2e8, 0xe2f6,
    0xe304, 0xe30d, 0xe31c, 0xe332, 0xe36e, 0xe379, 0xe380, 0xe394,
    0xe3a1, 0xe3ad, 0xe3ba, 0xe3d6, 0xe3da, 0xe3fe, 0xe409, 0xe40c,
    0xe41b, 0xe433, 0xe435, 0xe444, 0xe46f, 0xe4a5, 0xe4aa, 0xe4af,
    0xe4b1, 0xe4b7, 0xe4c9, 0xe4ca, 0xe4d4, 0xe4dd, 0xe529, 0xe532,
    0xe549, 0xe554, 0xe55e, 0xe570, 0xe573, 0xe579, 0xe58a, 0xe58c,
    0xe58f, 0xe591, 0xe5ae, 0xe5d5, 0xe5f4, 0xe5fd, 0xe613, 0xe620,
    0xe625, 0xe632, 0xe637, 0xe63d, 0xe643, 0xe651, 0xe676, 0xe67a,
    0xe686, 0xe69b, 0xe6ab, 0xe6bc, 0xe6e5, 0xe6f4, 0xe709, 0xe71d,
    0xe724, 0xe72b, 0xe736, 0xe753, 0xe756, 0xe75f, 0xe778, 0xe782,
    0xe78d, 0xe790, 0xe795, 0xe7a6, 0xe7b1, 0xe7b2, 0xe80c, 0xe87d,
    0xe881, 0xe887, 0xe896, 0xe8a5, 0xe8b8, 0xe8c9, 0xe8cf, 0xe8eb,
    0xe908, 0xe926, 0xe931, 0xe946, 0xe94a, 0xe95d, 0xe975, 0xe976,
    0xe980, 0xe99e, 0xe9e5, 0xe9f7, 0xea0e, 0xea20, 0xea2a, 0xea4c,
    0xea58, 0xea5d, 0xea6e, 0xea73, 0xea79, 0xea7a, 0xea7c, 0xea97,
    0xeaa4, 0xeab3, 0xeac1, 0xeac4, 0xead5, 0xead6, 0xeada, 0xeadf,
    0xeaf1, 0xeaf2, 0xeaf7, 0xeaf8, 0xeafb, 0xeb00, 0xeb0a, 0xeb2e,
    0xeb59, 0xeb5a, 0xeb66, 0xeb8b, 0xeb96, 0xeb9a, 0xebac, 0xebaf,
    0xebbe, 0xebd8, 0xebdb, 0xebe8, 0xebed, 0xec07, 0xec13, 0xec1c,
    0xec3e, 0xec4c, 0xec61, 0xec68, 0xec7a, 0xec83, 0xec85, 0xec8f,
    0xeca1, 0xeca2, 0xeca7, 0xecb3, 0xecba, 0xecd9, 0xecfb, 0xecfd,
    0xed0a, 0xed2e, 0xed5a, 0xed65, 0xed69, 0xed81, 0xed87, 0xed9c,
    0xeda3, 0xeda5, 0xedc3, 0xedd1, 0xedd2, 0xedeb, 0xedee, 0xedf9,
    0xee06, 0xee0c, 0xee17, 0xee22, 0xee48, 0xee55, 0xee56, 0xee5c,
    0xee69, 0xee8d, 0xeea3, 0xeeb8, 0xeeca, 0xeef0, 0xef01, 0xef26,
    0xef32, 0xef34, 0xef3d, 0xef52, 0xef5e, 0xef61, 0xef9b, 0xef9d,
    0xefa2, 0xefab, 0xefb9, 0xefe6, 0xeff7, 0xf009, 0xf00a, 0xf01b,
    0xf022, 0xf024, 0xf02d, 0xf030, 0xf03f, 0xf059, 0xf06f, 0xf074,
    0xf08b, 0xf099, 0xf0a6, 0xf0b2, 0xf0db, 0xf0e1, 0xf104, 0xf12f,
    0xf146, 0xf17c, 0xf1a2, 0xf1a8, 0xf1b0, 0xf1b9, 0xf1cd, 0xf1d6,
    0xf1f2, 0xf208, 0xf225, 0xf234, 0xf23e, 0xf26d, 0xf279, 0xf280,
    0xf29b, 0xf2b5, 0xf2cd, 0xf2da, 0xf2ef, 0xf303, 0xf305, 0xf317,
    0xf321, 0xf335, 0xf342, 0xf34e, 0xf35c, 0xf378, 0xf396, 0xf39a,
    0xf3c5, 0xf3cf, 0xf3d2, 0xf3d7, 0xf3dd, 0xf3f0, 0xf419, 0xf437,
    0xf43b, 0xf440, 0xf44c, 0xf452, 0xf467, 0xf480, 0xf491, 0xf492,
    0xf49d, 0xf4ab, 0xf4fd, 0xf4fe, 0xf50c, 0xf50f, 0xf521, 0xf528,
    0xf530, 0xf544, 0xf548, 0xf54e, 0xf572, 0xf577, 0xf57e, 0xf582,
    0xf590, 0xf595, 0xf596, 0xf5aa, 0xf5bd, 0xf5cf, 0xf5d8, 0xf5e1,
    0xf5e7, 0xf5f5, 0xf605, 0xf617, 0xf618, 0xf621, 0xf62d, 0xf633,
    0xf636, 0xf63c, 0xf659, 0xf66c, 0xf672, 0xf688, 0xf68e, 0xf693,
    0xf6dd, 0xf6ed, 0xf70d, 0xf731, 0xf738, 0xf74c, 0xf757, 0xf76d,
    0xf791, 0xf79e, 0xf7ab, 0xf7c2, 0xf7cb, 0xf7d9, 0xf7dc, 0xf7ef,
    0xf7f1, 0xf7fb, 0xf816, 0xf81c, 0xf826, 0xf82f, 0xf832, 0xf834,
    0xf857, 0xf85e, 0xf868, 0xf889, 0xf89b, 0xf8d3, 0xf8d5, 0xf8e5,
    0xf8e9, 0xf906, 0xf922, 0xf924, 0xf93f, 0xf941, 0xf955, 0xf96a,
    0xf96f, 0xf978, 0xf98b, 0xf99a, 0xf9c0, 0xf9c3, 0xf9c9, 0xf9cc,
    0xf9d7, 0xf9e7, 0xfa0f, 0xfa11, 0xfa35, 0xfa47, 0xfa4e, 0xfa69,
    0xfa78, 0xfa7d, 0xfa8e, 0xfa93, 0xfa9c, 0xfab2, 0xfab8, 0xfaeb,
    0xfb07, 0xfb10, 0xfb13, 0xfb15, 0xfb1a, 0xfb1c, 0xfb2a, 0xfb43,
    0xfb4f, 0xfb52, 0xfb62, 0xfb6e, 0xfb75, 0xfb79, 0xfb7c, 0xfb8a,
    0xfb92, 0xfba7, 0xfbc1, 0xfbd9, 0xfbda, 0xfbe6, 0xfbf7, 0xfbfd,
    0xfc00, 0xfc12, 0xfc1e, 0xfc78, 0xfc82, 0xfc9c, 0xfca6, 0xfcb8,
    0xfcdd, 0xfce8, 0xfd10, 0xfd20, 0xfd25, 0xfd3e, 0xfd45, 0xfd73,
    0xfd80, 0xfdab, 0xfdad, 0xfdb6, 0xfdbf, 0xfdc1, 0xfdc2, 0xfde5,
    0xfde6, 0xfdf8, 0xfe07, 0xfe08, 0xfe0d, 0xfe2a, 0xfe4f, 0xfe54,
    0xfe64, 0xfe76, 0xfe86, 0xfe91, 0xfe9e, 0xfea1, 0xfeba, 0xfec2,
    0xfecd, 0xfed9, 0xfedf, 0xff12, 0xff18, 0xff24, 0xff41, 0xff74,
    0xff82, 0xff99, 0xff9a, 0xff9c, 0xffb8, 0xffd2, 0xfff5, 0xfff6,
};


static const crc_t FAV_POLYS[6] = {
    0x11bbb,
    0x140cd,
    0x1477d,
    0x16605,
    0x17dc5,
    0x1bbb1
};


int main()
{
    //FindGeneratorPolynomials();

    int goodcount = 0;
    for (int polyIndex = 0; polyIndex < 6; ++polyIndex)
    //for (int polyIndex = 0; polyIndex < 2048; ++polyIndex)
    {
        crc_t poly = FAV_POLYS[polyIndex];
        //crc_t poly = ((crc_t)GEN_POLY[polyIndex] << 1) | 1;

        crc16_init(poly);

        if (checkvarn(poly))
        {
            cout << hex << poly << endl;
            ++goodcount;
        }
        else
        {
            //cout << "BAD POLY: " << hex << poly << endl;
        }
    }
    cout << "Good count = " << goodcount << endl;

    return 0;
}
